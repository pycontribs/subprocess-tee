name: tox

on:
  push:  # only publishes pushes to the main branch to TestPyPI
    branches:  # any integration branch but not tag
      - main
    tags-ignore:
      - "**"
  pull_request:

jobs:
  linters:
    name: ${{ matrix.env.TOXENV }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
        - 3.8
        os:
        - ubuntu-latest
        env:
        - TOXENV: lint
        - TOXENV: packaging
    steps:
    - uses: actions/checkout@master
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: set PY_SHA256
      run: echo "PY_SHA256=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
    - name: Pre-commit cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ env.PY_SHA256 }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('tox.ini') }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('.pre-commit-config.yaml') }}-${{ hashFiles('pytest.ini') }}
    - name: Pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ env.PY_SHA256 }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('tox.ini') }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('.pre-commit-config.yaml') }}-${{ hashFiles('pytest.ini') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install tox
      run: python -m pip install --upgrade tox
    - name: Log installed dists
      run: python -m pip freeze --all
    - name: Initialize tox envs
      run: python -m tox --notest --skip-missing-interpreters false -vv
      env: ${{ matrix.env }}
    - name: Test with tox
      run: python -m tox
      env: ${{ matrix.env }}
    - name: Archive logs
      uses: actions/upload-artifact@v3
      with:
        name: logs.zip
        path: .tox/**/log/

  alpine:
    name: alpine
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v1
      - name: Run docker build
        run: docker build .

  unit:
    name: py${{ matrix.python-version }}@${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      # fail-fast: false
      # max-parallel: 5
      # The matrix testing goal is to cover the *most likely* environments
      # which are expected to be used by users in production. Avoid adding a
      # combination unless there are good reasons to test it, like having
      # proof that we failed to catch a bug by not running it. Using
      # distribution should be prefferred instead of custom builds.
      matrix:
        os:
        # https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners
        - ubuntu-latest  # 18.04
        # - windows-latest
        # - windows-2016
        python-version:
        - "3.8"
        - "3.9"
        - "3.10"
        include:
        - os: ubuntu-latest
          python-version: "3.8"
          tox_env: py38
        - os: ubuntu-latest
          python-version: "3.9"
          tox_env: py39
        - os: ubuntu-latest
          python-version: "3.10"
          tox_env: py310
        - os: ubuntu-latest
          python-version: "3.11"
          tox_env: py311
        - os: macOS-latest
          python-version: "3.8"
          tox_env: py38
        - os: macOS-latest
          python-version: "3.11"
          tox_env: py311
    steps:
    - uses: actions/checkout@master
    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set up stock Python ${{ matrix.python-version }} from GitHub
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Log the currently selected Python version info (${{ matrix.python-version }})
      run: |
        python --version --version
        which python
    - name: Pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ env.PY_SHA256 }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('tox.ini') }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('.pre-commit-config.yaml') }}-${{ hashFiles('pytest.ini') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install tox
      run: |
          python -m pip install -U pip
          pip install tox
    - name: Run tox -e ${{ matrix.tox_env }}
      run: tox -e ${{ matrix.tox_env }}

  check: # This job does nothing and is only used for the branch protection
    if: always()
    needs:
      - alpine
      - linters
      - unit
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
